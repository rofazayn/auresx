datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/graphql/type-graphql"
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  name           String
  emailConfirmed Boolean?       @default(false)
  /// @TypeGraphQL.omit(output: true, input: true)
  password       String
  phoneNumber    String?
  country        String?        @default("Algeria")
  region         String?
  city           String?
  job            String?
  preferredTheme String?        @default("system")
  balance        Float?         @default(0.0)
  bonus          Float?         @default(0.0)
  subscriptions  Subscription[]
  transactions   Transaction[]
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
}

model Product {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String         @unique
  monthPrice     Float          @default(0.0)
  trialDuration  Int            @default(7)
  cancelDuration Int            @default(7)
  description    String?
  infoURL        String?        @default("https://auresx.com/explore/")
  plans          Plan[]
  subscriptions  Subscription[]
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
}

model Plan {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @default("Product Plan")
  pricePerMonth Float     @default(2000.00)
  details       String    @default("{}")
  product       Product   @relation(fields: [productId], references: [id])
  productId     String    @db.ObjectId
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Subscription {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  product      Product       @relation(fields: [productId], references: [id])
  productId    String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  totalPaid    Float         @default(0.0)
  renewCounter Int           @default(0)
  transactions Transaction[]
  expiryDate   DateTime?
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
}

model Transaction {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  type           String        @default("PAYMENT")
  status         String        @default("PENDING")
  message        String?       @default("")
  amount         Float         @default(0.0)
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?       @db.ObjectId
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @db.ObjectId
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
}
